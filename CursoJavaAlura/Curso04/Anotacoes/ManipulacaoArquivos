new File

- Cria uma representa√ß√£o abstrata de um arquivo ou diret√≥rio no sistema de arquivos.
- N√£o abre nem l√™/escreve no arquivo ‚Äî ele apenas aponta para o caminho.
- Usado para verificar se o arquivo existe, obter seu nome, caminho absoluto, tamanho, entre outros.

- Exemplo:

File arquivo = new File("exemplo.txt");
if (arquivo.exists()) {
System.out.println("O arquivo existe!");
}

new FileWriter

- Cria um fluxo de sa√≠da para gravar dados em um arquivo.
- Pode criar o arquivo se ele n√£o existir, ou sobrescrev√™-lo (a menos que seja usado no modo de append).
- Funciona em conjunto com BufferedWriter para escrita mais eficiente.

- Exemplo:

FileWriter escritor = new FileWriter("exemplo.txt");
escritor.write("Hello, world!");
escritor.close();

‚úçÔ∏è Exemplo: Escrevendo em um arquivo com seguran√ßa
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

public class EscritaArquivo {
public static void main(String[] args) {
try {
// Representa o caminho do arquivo
File arquivo = new File("saida.txt");

            // Cria o FileWriter (modo append = true para n√£o sobrescrever)
            FileWriter fw = new FileWriter(arquivo, true);

            // Usa BufferedWriter para escrita mais eficiente
            BufferedWriter bw = new BufferedWriter(fw);

            // Escreve no arquivo
            bw.write("Escrevendo com FileWriter e BufferedWriter!");
            bw.newLine(); // Adiciona uma nova linha

            // Fecha os fluxos
            bw.close();
            fw.close();

            System.out.println("Arquivo escrito com sucesso!");

        } catch (IOException e) {
            System.out.println("Ocorreu um erro ao escrever no arquivo:");
            e.printStackTrace();
        }
    }

}

Exemplo: Escrevendo um arquivo com seguran√ßa

import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

public class EscritaArquivo {
public static void main(String[] args) {
try {
// Representa o caminho do arquivo
File arquivo = new File("saida.txt");

            // Cria o FileWriter (modo append = true para n√£o sobrescrever)
            FileWriter fw = new FileWriter(arquivo, true);

            // Usa BufferedWriter para escrita mais eficiente
            BufferedWriter bw = new BufferedWriter(fw);

            // Escreve no arquivo
            bw.write("Escrevendo com FileWriter e BufferedWriter!");
            bw.newLine(); // Adiciona uma nova linha

            // Fecha os fluxos
            bw.close();
            fw.close();

            System.out.println("Arquivo escrito com sucesso!");

        } catch (IOException e) {
            System.out.println("Ocorreu um erro ao escrever no arquivo:");
            e.printStackTrace();
        }
    }

}

üîé O que est√° acontecendo aqui?

- File serve para definir onde ser√° gravado.
- FileWriter cria o canal de escrita para esse arquivo.
- BufferedWriter d√° um boost na performance.
- O modo append = true evita que o conte√∫do anterior seja apagado.
- try-catch garante que erros sejam tratados com gra√ßa (e sem crashar seu programa).
